import { ProcessingType } from "../common/Common.model";

export interface InitiateAccountVerificationRequest {
  /** email of user */
  email?: string;
  /** mobile number of user */
  mobile?: string;
  /** phone number of user */
  phone?: string;
  /** username of user */
  username?: string;
  /** described which medium (email, mobile, username) to be used for verifying user */
  verificationMedium?: string;
  /** can be either CODE, LINK, or GENERAL */
  processingType?: ProcessingType;
  /** Request id returned from the authorization call */
  requestId?: string;
  /** Unique identifier of client app, can be found in app setting under admin ui */
  client_id?: string;
  /** Specify the url where the user needs to be redirected after successful login */
  redirect_uri?: string;
  /** response type expected for the process */
  response_type?: string;
  /** Subject (User) identifier */
  sub?: string;
  /** Refers to a template or predefined message/key associated with the opt-in reminder. */
  templateKey?: string;
  /** name of user */
  name?: string;
  /** Response language, which is configured in cidaas admin ui */
  accept_language?: string;
}

export interface VerifyAccountRequest {
  /** accvid will be given after initiate account verification process */
  accvid: string;
  /** code which has been sent to predetermined verification medium */
  code: string;
}

export interface GetMFAListRequest {
  /** email of user */
  email: string;
  /** Request id returned from the authorization call */
  request_id: string;
}

export interface CancelMFARequest {
  /** comes from initiate MFA process */
  exchange_id: string;
  /** reason of cancellation */
  reason: string;
  /** MFA type */
  type: string;
}

export interface InitiateEnrollmentRequest {
  /** type of MFA to be used for verification */
  verification_type: string;
  /** details of the device */
  deviceInfo?: DeviceInfo;
}

export interface EnrollVerificationRequest {
  /** comes from initiate MFA process */
  exchange_id?: string;
  /** id of the device */
  device_id?: string;
  finger_print?: string;
  /** Unique identifier of client app, can be found in app setting under admin ui */
  client_id?: string;
  push_id?: string;
  pass_code?: string;
  pkce_key?: string;
  face_attempt?: number;
  attempt?: number;
  fido2_client_response?: FIDO2EnrollEntity;
  /** type of MFA to be used for verification  */
  verification_type?: string;
}

export interface CheckVerificationTypeConfiguredRequest extends GetMFAListRequest {
  /** type of MFA to be used for verification  */
  verification_type: string;
}

export interface InitiateMFARequest {
  /** application request id, generated by oauth call */
  request_id: string;
  usage_type: string;
  /** medium type */
  type?: string
  /** user email */
  email?: string;
  /** defines whether the the process will be done via email link or whether the user needs to enter a code to complete the process. */
  processingType?: ProcessingType;
  /** masked sub */
  q?: string;
  /** user subject identifier */
  sub?: string;
  /** user mobile number */
  mobile_number?: string;
  /** username */
  username?: string;
  /** application client_id */
  client_id?: string;
  /** id for medium type (email, sms) */
  medium_id?: string;
  /** is a firebase token, used to validate for mobile apps */
  push_id?: string;
  /** device unique id to do authentication (e.g. smartphone) */
  device_id?: string;
  single_factor_auth?: boolean;
  single_factor_sub_ref?: string;
  /** id for current flow, needed for multifactor authentication */
  trackId?: string;
}

export interface AuthenticateMFARequest {
  /** comes from initiate MFA process */
  exchange_id: string;
  /** code which has been sent to predetermined verification type */
  pass_code: string;
  /** type of MFA to be used for verification */
  type: string;
  /** Subject (User) identifier */
  sub?: string;
}

export interface DeviceInfo {
  /** id of the device */
  deviceId: string;
  /** location details of the device */
  location: Location;
}

export interface Location {
  /** latitude of the device */
  lat: string;
  /** longitude of the device */
  lon: string;
}

export interface FIDO2EnrollEntity {
  client_response?: any;
  fidoRequestId?: string;
}