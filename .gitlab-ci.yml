stages:
  - test
  - build
  - quality
  - badges
  - deploy

services:
  - name: docker:dind
    entrypoint: ["env", "-u", "DOCKER_HOST"]
    command: ["dockerd-entrypoint.sh"]

variables:
  DOCKER_TLS_CERTDIR: ""
  QUALITY_BASE_REPO: https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.widas.de/widas/codequality.git
  #GRADLE_OPTS: "-Dorg.gradle.daemon=false"

image: docker:git

test:
  image: node:latest
  stage: test
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script: 
    - npm install
    - npm run test
    
syntax:
  image: node:latest
  stage: quality
  before_script:
    - npm install eslint --save-dev
    - ./node_modules/.bin/eslint --init
  
codecoverage:
  image: node:latest
  stage: quality
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - npm install
    - npm install -g jest
  script:
    - jest --coverage
    - npm run test -- --coverage --watchAll=false
    - cat /builds/cidaas-public-devkits/cidaas-public-sdks/cidaas-sdk-javascript-v2/coverage/lcov-report/index.html
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
      paths: [/builds/cidaas-public-devkits/cidaas-public-sdks/cidaas-sdk-javascript-v2/coverage/*]
      
dependency_scanning:
  image: docker:stable
  stage: quality
  variables:
    DOCKER_DRIVER: overlay2
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - export SP_VERSION=$(echo "$CI_SERVER_VERSION" | sed 's/^\([0-9]*\)\.\([0-9]*\).*/\1-\2-stable/')
    - docker run
        --env DEP_SCAN_DISABLE_REMOTE_CHECKS="${DEP_SCAN_DISABLE_REMOTE_CHECKS:-false}"
        --volume "$PWD:/code"
        --volume /var/run/docker.sock:/var/run/docker.sock
        "registry.gitlab.com/gitlab-org/security-products/dependency-scanning:$SP_VERSION" /code
  artifacts:
    reports:
      dependency_scanning: gl-dependency-scanning-report.json
    paths: [gl-dependency-scanning-report.json]

code_quality_json:
  stage: quality
  allow_failure: true
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    CODE_QUALITY_IMAGE: "registry.gitlab.com/gitlab-org/ci-cd/codequality:0.85.9"
  script:
    - docker pull "$CODE_QUALITY_IMAGE"
    # Clone the .codeclimate.yml from the code quality base repo
    - git clone ${QUALITY_BASE_REPO}
    - cp codequality/conf/codeclimate/rules/java/.codeclimate.yml .
    - rm -rf codequality
    # Run the codeclimate image from gitlab
    - docker run
      --env SOURCE_CODE="$PWD"
      --env CODECLIMATE_CODE="$PWD/app"
      --volume /tmp/cc:/tmp/cc
      --volume "$PWD":/code
      --volume /var/run/docker.sock:/var/run/docker.sock
      "$CODE_QUALITY_IMAGE" /code
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths: [gl-code-quality-report.json]
  dependencies: []
  

code_quality_html:
  stage: quality
  allow_failure: true
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    CONTAINERID: ""
  script:
    - docker pull codeclimate/codeclimate
    # Clone the .codeclimate.yml from the code quality base repo
    - git clone ${QUALITY_BASE_REPO}
    - cp codequality/conf/codeclimate/rules/java/.codeclimate.yml .
    - rm -rf codequality
    # Install the code climate engines
    - docker run
      --env SOURCE_CODE="$PWD"
      --env CODECLIMATE_CODE="$PWD"
      --volume "$PWD":/code
      --volume /var/run/docker.sock:/var/run/docker.sock
      --volume /tmp/cc:/tmp/cc
      -d codeclimate/codeclimate engines:install > /dev/null
    # Get container ID
    # Run code climate
    - docker run
      --env SOURCE_CODE="$PWD"
      --env CODECLIMATE_CODE="$PWD"
      --volume "$PWD":/code
      --volume /var/run/docker.sock:/var/run/docker.sock
      --volume /tmp/cc:/tmp/cc
      codeclimate/codeclimate analyze /code -f html > codeclimate.html
  artifacts:
    paths: [codeclimate.html]
  dependencies: []
  rules:
    - if: '$CODE_QUALITY_DISABLED'
      when: never
    - if: '$CI_COMMIT_TAG || $CI_COMMIT_BRANCH'


create_codequality_badges:
  image: python:3-stretch
  stage: badges
  dependencies:
    - code_quality_json
    - codecoverage
    - dependency_scanning
  script:
    # Get the quality base repo
    - git clone ${QUALITY_BASE_REPO}
    
    # Parse the codeclimate report for badges
    - cp codequality/src/calculate_codeclimate_metrics.py .
    - python3 calculate_codeclimate_metrics.py gl-code-quality-report.json

    # Parse the code coverage report for badges
    - cp /builds/cidaas-public-devkits/cidaas-public-sdks/cidaas-sdk-javascript-v2/coverage/lcov-report/index.html .
    - cp codequality/src/count_lines_java_code.py .
    - python3 count_lines_java_code.py
    
    # Parse the dependency vulnerability report
    - cp codequality/src/calculate_dependency_scan_metrics.py .
    - python3 calculate_dependency_scan_metrics.py gl-dependency-scanning-report.json
    
    # Cleanup
    - rm -rf codequality

    # Using anybadge to create the badges
    - pip install anybadge
    # Setup the color ranges for the badges
    - export BADGE_COLOR_VULNERABILITIES="0=green 1=yellow 2=orange 3=red 4=brightred"
    - export BADGE_COLOR_RANGE_MINOR="10=green 20=yellow 50=orange 100=red 200=brightred"
    - export BADGE_COLOR_RANGE_MAJOR="1=green 10=yellow 40=orange 100=red 150=brightred"
    - export BADGE_COLOR_RANGE_CRITICAL="1=green 3=yellow 5=orange 10=red 20=brightred"
    - export BADGE_COLOR_RANGE_FIXME="1=green 10=yellow 30=orange 50=red 100=brightred"
    - export BADGE_COLOR_RANGE_TOTAL="1=green 50=yellow 100=orange 200=red 300=brightred"

    - export DATE=$(cat date.txt)
    - anybadge -l sw_quality -v "$DATE" -f sw_quality.svg --color=green

    - export TOTAL_ISSUES=$(cat total_issues.txt)
    - anybadge -l total_issues -v $TOTAL_ISSUES -m "%d" -u -f total_issues.svg $BADGE_COLOR_RANGE_TOTAL

    - export CRITICAL_ISSUES=$(cat critical_issues.txt)
    - anybadge -l critical_issues -v $CRITICAL_ISSUES -m "%d" -u -f critical_issues.svg $BADGE_COLOR_RANGE_CRITICAL

    - export BLOCKER_ISSUES=$(cat blocker_issues.txt)
    - anybadge -l blocker_issues -v $BLOCKER_ISSUES -m "%d" -u -f blocker_issues.svg $BADGE_COLOR_RANGE_CRITICAL

    - export MAJOR_ISSUES=$(cat major_issues.txt)
    - anybadge -l major_issues -v $MAJOR_ISSUES -m "%d" -u -f major_issues.svg $BADGE_COLOR_RANGE_MAJOR

    - export MINOR_ISSUES=$(cat minor_issues.txt)
    - anybadge -l minor_issues -v $MINOR_ISSUES -m "%d" -u -f minor_issues.svg $BADGE_COLOR_RANGE_MINOR

    - export FIXME_ISSUES=$(cat fixme_issues.txt)
    - anybadge -l fixmes -v $FIXME_ISSUES -m "%d" -u -f fixme_issues.svg $BADGE_COLOR_RANGE_FIXME

    - export DUPLICATION_ISSUES=$(cat duplication_issues.txt)
    - anybadge -l duplications -v $DUPLICATION_ISSUES -m "%d" -u -f duplication_issues.svg $BADGE_COLOR_RANGE_CRITICAL

    - export LOC=$(cat loc.txt)
    - anybadge -l LoC -v $LOC -f loc.svg --color=green

    - export CLASSES=$(cat classes.txt)
    - anybadge -l Classes -v $CLASSES -f classes.svg --color=green
    
    - export TOTAL_VULNERABILITIES=$(cat total_vulnerabilities.txt)
    - anybadge -l library_vulnerabilities -v $TOTAL_VULNERABILITIES -m "%d" -u -f total_vulnerabilities.svg $BADGE_COLOR_VULNERABILITIES
    
    - export VULNERABLE_DEPENDENCIES=$(cat vulnerable_dependencies.txt)
    - anybadge -l vulnerable_libraries -v $VULNERABLE_DEPENDENCIES -m "%d" -u -f vulnerable_dependencies.svg $BADGE_COLOR_VULNERABILITIES

    # Export the created .svg's to the public directory
    - mkdir public
    - mv *.svg public
  artifacts:
    paths:
      - public/*.svg
      
pages:
  image: maven:3-jdk-8
  stage: deploy
  dependencies:
    - code_quality_html
    - code_quality_json
    - create_codequality_badges
    - codecoverage
    - dependency_scanning
  script:
    - mv codeclimate.html public/codeclimate.html
    - mkdir -p public/jest/
    - mv /builds/cidaas-public-devkits/cidaas-public-sdks/cidaas-sdk-javascript-v2/coverage/* public/jest/
    - mv gl-code-quality-report.json public/gl-code-quality-report.json
    - mv gl-dependency-scanning-report.json public/gl-dependency-scanning-report.json
  artifacts:
    paths:
      - public
